// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    apply from: 'dependencies.gradle'
    dependencies {
        classpath gradlePlugin.android
        classpath gradlePlugin.kotlin
    }
    repositories {
        google()
        jcenter()
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

subprojects {
    afterEvaluate { project ->
        //android libraries
        if (project.hasProperty('android')) {
            android {
                sourceSets.all {
                    java.srcDir("src/$name/kotlin")
                }
                compileSdkVersion config.compileSdk

                signingConfigs {
                    ydb {
                        keyAlias 'androiddebugkey'
                        keyPassword 'android'
                        storeFile file('source/debug.keystore')
                        storePassword 'android'
                    }
                }

                defaultConfig {
                    minSdkVersion config.minSdk
                    targetSdkVersion config.targetSdk
                    versionCode config.versionCode
                    versionName config.versionName
                    signingConfig signingConfigs.ydb
                    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

                    resValue "string", "applicationLabel", config.projectName

                    javaCompileOptions {
                        annotationProcessorOptions {
                            arguments += ["room.schemaLocation": "$projectDir/room_schemas".toString()]
                        }
                    }
                }

                buildTypes {
                    release {
                        minifyEnabled true
                        proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                    }
                    debug {
                        debuggable true
                    }
                }

                compileOptions {
                    sourceCompatibility config.java
                    targetCompatibility config.java
                }

                kotlinOptions {
                    jvmTarget = config.jvmTarget
                    useIR = true
                }
            }
        }

        //kotlin/java libraries
        if (project.plugins.hasPlugin('java-library')) {
            java {
                sourceCompatibility = config.java
                targetCompatibility = config.java
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
